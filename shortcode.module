<?php

/**
 * @file
 * Provides an API for creating and processing arbitrary BBCode-like tags.
 */

module_load_include('inc', 'shortcode');

/**
 * Gets available shortcode definitions.
 *
 * @param array $tag_list
 *   (optional) An indexed array of the names of tags to get, or an empty array
 *   to process all available tags. Defaults to all tags.
 *
 * @return array
 *   Returns an array of shortcode definitions.
 *
 * @see hook_shortcode_info()
 * @see hook_shortcode_info_alter()
 */
function shortcode_get_shortcodes(array $tag_list = array()) {
  $shortcodes = &drupal_static(__FUNCTION__);
  if (!isset($shortcodes)) {
    // Get all shortcode definitions.
    $shortcodes = module_invoke_all('shortcode_info');
    drupal_alter('shortcode_info', $shortcodes);

    // Remove invalid definitions.
    foreach ($shortcodes as $tag => $definition) {
      if (!_shortcode_is_valid_shortcode($definition)) {
        unset($shortcodes[$tag]);
      }
    }
  }

  // Filter the definitions to a subset, if given. This is done outside the
  // above static cache check so that the complete list is cached.
  if (!empty($tag_list)) {
    $subset = array();
    foreach ($shortcodes as $tag => $definition) {
      if (in_array($tag, $tag_list)) {
        $subset[$tag] = $definition;
      }
    }
    return $subset;
  }

  return $shortcodes;
}

/**
 * Filters a given array of attributes down to an allowed subset.
 *
 * @param array $attributes
 *   An associative array of XML/HTML tag attributes suitable for use with
 *   drupal_attributes().
 * @param array $allowed_list
 *   An indexed array of names of allowed attributes, e.g., "src", "href", and
 *   "width".
 *
 * @return array
 *   An associative array of only the allowed attributes given.
 */
function shortcode_filter_attributes(array $attributes, array $allowed_list) {
  foreach ($attributes as $key => $value) {
    if (!in_array($key, $allowed_list)) {
      unset($attributes[$key]);
    }
  }
  return $attributes;
}

/**
 * Expands supported shortcodes in the given text.
 *
 * Unsupported shortcodes will be left alone. Beware disabling modules that
 * provide shortcodes that may already be in use lest raw tags appear to end
 * users.
 *
 * @param string $text
 *   A string of text containing zero or more shortcodes to expand.
 * @param array $tag_list
 *   (optional) An indexed array of the names of tags to process, or an empty
 *   array to process all available tags. Defaults to all tags.
 *
 * @return string
 *   The given text with all contained shortcodes expanded.
 */
function shortcode_process_shortcodes($text, array $tag_list = array()) {
  $shortcodes = shortcode_get_shortcodes($tag_list);

  // Skip processing if no shortcodes are defined or if the given text doesn't
  // contain any tags.
  if (empty($shortcodes) || strpos($text, '[') === FALSE) {
    return $text;
  }

  $pattern = '/' . _shortcode_shortcode_regex(array_keys($shortcodes)) . '/s';
  return preg_replace_callback($pattern, '_shortcode_process_tag', $text);
}

/**
 * Determines whether a given shortcode exists.
 *
 * @param string $tag
 *   The tag name of the shortcode to check for.
 *
 * @return bool
 *   TRUE if the given shortcode exists, or FALSE if not.
 */
function shortcode_shortcode_exists($tag) {
  $all_tags = shortcode_get_shortcodes();
  return array_key_exists($tag, $all_tags);
}
